buildscript {
}

plugins {
	id 'com.palantir.git-version' version '0.7.1'
	id 'co.riiid.gradle' version '0.4.2'
	id 'com.jfrog.bintray' version '1.7.3'
}

allprojects {
	project.metaClass {
		isProperty = { propName ->
			return delegate.hasProperty(propName)&&!delegate.property(propName).empty
		}
	}
}

import org.apache.commons.lang.StringUtils

ext {
	mod_commonname = "${rootProject.name}-common"
	mod_build_prefix = 'b'

	assert project.isProperty('version_major'): 'missing property: version_major'
	assert project.isProperty('version_minor'): 'missing property: version_minor'
	assert project.isProperty('version_patch'): 'missing property: version_patch'

	mod_travis = System.getenv('TRAVIS') as boolean
	mod_buildnumber = System.getenv('TRAVIS_BUILD_NUMBER') as int
	mod_buildtag = System.getenv('TRAVIS_TAG')
	mod_prerelease = mod_autorelease = mod_travis && StringUtils.isEmpty(mod_buildtag)

	if (mod_buildtag!=null && mod_buildtag.startsWith(mod_build_prefix))
		throw new GradleException("Oops, circulated travis build. A push starting with the prefix '${mod_build_prefix}' was detected: ${mod_buildtag}")

	mod_version_min = "${project.version_major}.${project.version_minor}.${project.version_patch}"
    mod_version = mod_buildnumber != null ? "${mod_version_min}.${mod_buildnumber}" : "${mod_version_min}"
    mod_artifacts_dir = file "artifacts/${mod_version_min}/${mod_version}"
	mod_artifacts_release_dir = file 'artifacts/release'

	mod_git_repo = plugins.findPlugin('com.palantir.git-version').gitRepo(rootProject).repository
	mod_git_head = mod_git_repo.getRef('HEAD').objectId.name()

	def parseChangelog = { changelog ->
		def title = null
		def msg = null
		def releasetype = 'release'

		if (changelog!=null) {
			if (StringUtils.contains(changelog, '[beta]')) {
				changelog = StringUtils.replace(changelog, '[beta]', '')
				releasetype = 'beta'
			} else if (StringUtils.contains(changelog, '[alpha]')) {
				changelog = StringUtils.replace(changelog, '[alpha]', '')
				releasetype = 'alpha'
			}

			def tagtitle = StringUtils.substringBefore(changelog, '\n')
			def tagmsg = StringUtils.stripStart(StringUtils.substringAfter(changelog, '\n'), '\n')
			if (!StringUtils.isEmpty(tagtitle) && !StringUtils.isEmpty(tagmsg)) {
				title = tagtitle
				msg = tagmsg
			}
		}
		return [title, msg, releasetype]
	}

	(mod_changelog_title, mod_changelog, mod_releasetype) = ({
		def (changelog_title, changelog, releasetype) = parseChangelog(({
			if (!StringUtils.isEmpty(mod_buildtag)) {
				def git_ref = mod_git_repo.getRef "refs/tags/${mod_buildtag}"

				if (git_ref!=null) {
					def git_revwalk = new org.eclipse.jgit.revwalk.RevWalk(mod_git_repo)
					try {
						return git_revwalk.parseTag(git_ref.getObjectId()).getFullMessage()
					} catch(org.eclipse.jgit.errors.IncorrectObjectTypeException e) {
					} finally {
						git_revwalk.dispose()
					}
				}
			}
			return null
		})())

		def (r_changelog_title, r_changelog) = ({
			def r_change = [changelog_title, changelog]
					*.replace('{version}', mod_version)
			if (mod_buildnumber==null)
				return r_change
			else if (mod_buildnumber!=null)
				return r_change
					*.replace('{version_number}', mod_buildnumber)
		})()

		if (mod_buildnumber!=null) {
			if (changelog_title!=null && changelog!=null)
				return [r_changelog_title, r_changelog, releasetype]
			return ["v${mod_version}", "v${mod_version_min} Build${mod_buildnumber}", 'alpha']
		} else {
			if (changelog_title!=null && changelog!=null)
				return [r_changelog_title, r_changelog, releasetype]
            return ["v${mod_version}", "v${mod_version}", 'alpha']
		}
	})()

    mod_deploy_target = file 'deploy.txt'

	sec_curseforge_key = System.getenv('CURSEFORGE_TOKEN') ?: project.isProperty('api_key_curseforge') ? project.api_key_curseforge : null
	sec_github_key = System.getenv('GITHUB_TOKEN') ?: project.isProperty('api_key_github') ? project.api_key_github : null
	sec_bintray_user = System.getenv('BINTRAY_USER') ?: project.isProperty('api_user_bintray') ? project.api_user_bintray : null
	sec_bintray_key = System.getenv('BINTRAY_KEY') ?: project.isProperty('api_key_bintray') ? project.api_key_github : null
	sec_keystore_location = System.getenv('KEYSTORE_LOCATION') ?: project.isProperty('keystore_location') ? project.keystore_location : null
	sec_keystore_alias = System.getenv('KEYSTORE_ALIAS') ?: project.isProperty('keystore_alias') ? project.keystore_alias : null
	sec_keystore_password = System.getenv('KEYSTORE_PASSWORD') ?: project.isProperty('keystore_password') ? project.keystore_password : null
}

evaluationDependsOnChildren()

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

sourceSets {
	delegate.each { s ->
		s.java {
			srcDirs = []
		}
		s.resources {
			srcDirs = []
		}
	}
}

task setupSourceSets {
	doLast {
		sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.kotlin.srcDirs*.each { it.mkdirs() }
		sourceSets*.resources.srcDirs*.each { it.mkdirs() }
	}
	[tasks.eclipseClasspath, tasks.ideaModule]*.dependsOn 'setupSourceSets'
}

version = "${mod_version}"

jar {
	subprojects.each { p ->
		if (p.name==mod_commonname) {
			manifest p.commonManifest
			p.tasks.shadowJar.outputs.files.each { f ->
				from zipTree(f)
			}
		} else {
			p.tasks.jar.outputs.files.each { f ->
				from(f) {
					rename '.*', p.version_minecraft+'.jar'
				}
			}
		}
		dependsOn p.tasks.build
		mustRunAfter p.tasks.signJars
	}
	classifier = 'universal'
	destinationDir = mod_artifacts_dir
}

task releaseArtifacts(dependsOn: 'build', type: Sync) {
    from mod_artifacts_dir
    into mod_artifacts_release_dir
}

gradle.taskGraph.whenReady {taskGraph ->
	if (taskGraph.hasTask(tasks.githubRelease)) {
		assert sec_github_key!=null, 'missing sec_github_key'
		assert project.isProperty('extra_github_owner'), 'missing extra_github_owner'
		assert project.isProperty('extra_github_repo'), 'missing extra_github_repo'
	}
}
if (sec_github_key!=null&&project.isProperty('extra_github_owner')&&project.isProperty('extra_github_repo')) {
	github {
		tasks.githubRelease.dependsOn 'build'
		prerelease = mod_prerelease
		owner = project.extra_github_owner
		repo = project.extra_github_repo
		token = sec_github_key
        tagName = mod_travis ? (mod_autorelease ? "${mod_build_prefix}${mod_buildnumber}" : mod_buildtag) : mod_version
		targetCommitish = mod_git_head
		name = mod_changelog_title
		body = mod_changelog
		draft = false
		def allassets = [jar]
		subprojects.each { p ->
			allassets.addAll([p.tasks.shadowJar, p.tasks.jar, p.tasks.devJar, p.tasks.sourceJar, p.tasks.apiJar]*.outputs*.files*.asPath*.tr('\\','/'))
		}
		assets = allassets
	}
}

publishing {
	publications {
		ModPublication(MavenPublication) {
			groupId = project.group
			artifactId = project.modid
			version = "${mod_version}"
			artifact jar
			subprojects.each { p ->
				artifact p.shadowJar
				artifact p.jar
				artifact p.devJar
				artifact p.sourceJar
				artifact p.apiJar
			}
		}
	}
}

gradle.taskGraph.whenReady {taskGraph ->
	if (taskGraph.hasTask(tasks.bintrayUpload)) {
		assert sec_bintray_user!=null, 'missing sec_bintray_user'
		assert sec_bintray_key!=null, 'missing sec_bintray_key'
		assert project.isProperty('extra_bintray_repo'), 'missing extra_bintray_repo'
		assert project.isProperty('extra_bintray_name'), 'missing extra_bintray_name'
	}
}
if (sec_bintray_user!=null&&sec_bintray_key!=null&&project.isProperty('extra_bintray_repo')&&project.isProperty('extra_bintray_name')) {
	bintray {
		tasks.bintrayUpload.enabled = !mod_autorelease
		user = sec_bintray_user
		key = sec_bintray_key
		publications = ['ModPublication']
		publish = true
		pkg {
			repo = project.extra_bintray_repo
			name = project.extra_bintray_name
			version {
				name = "${mod_version}"
				released = new Date()
			}
		}
	}
} else
	tasks.bintrayUpload.enabled = false