buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven {
            name = "CurseForge"
            url = "https://minecraft.curseforge.com/api/maven/"
        }
        maven {
            url "http://maven.shadowfacts.net/"
        }
    }

    dependencies {
        classpath project.forgegradle
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.1'
    id 'com.matthewprenger.cursegradle' version '1.0.8'
}

// ForgeGradle 2.3 with Kotlin to add new sourceSets
apply plugin: 'java'
sourceSets {
	common_api {}
	common_main {}
	common_test {}
}

apply plugin: project.forgegradle_plugin
apply plugin: 'kotlin'
def fg_plugin = plugins.findPlugin project.forgegradle_plugin

// Fix compatibility issue between Gradle 4 and ForgeGradle 2.1
if (project.forgegradle.contains('1.2') || project.forgegradle.contains('2.1'))
    if (gradle.startParameter.logLevel.compareTo(org.gradle.api.logging.LogLevel.LIFECYCLE) >= 0)
        ant.lifecycleLogLevel = 'ERROR'
if (project.forgegradle.contains('2.1')) {
    def levels = [:]
    [tasks.makeStart, tasks.recompileMc]*.doFirst {
        def level = gradle.startParameter.logLevel
        if (level.compareTo(org.gradle.api.logging.LogLevel.LIFECYCLE) >= 0) {
            levels.put(delegate, level)
            gradle.startParameter.logLevel = org.gradle.api.logging.LogLevel.INFO
        }
    }*.doLast {
        def level = levels.get(delegate)
        if (level!=null)
            gradle.startParameter.logLevel = level
    }
}

version = mod_version

configurations {
    shade
    compile.extendsFrom shade
}

tasks.withType(Jar) {
    compileJava.options.encoding = 'UTF-8'
    compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

minecraft {
    version = "${project.version_minecraft}-${project.version_forge}"

    if (project.isProperty('version_mappings'))
        mappings = project.version_mappings

    if (!project.isProperty('run_location'))
        runDir = 'run'
    else
        runDir = run_location.replace('{modid}', project.modid).replace('{mcversion}', project.version_minecraft)

    replaceIn 'Reference.java'
    replaceIn 'Reference.kt'
    replace '{modid}', project.modid
    replace '{modname}', project.modname
    replace '{version}', mod_version
    replace '{mcversion}', project.version_minecraft
    replace '{forgeversion}', project.version_forge
}

if (!project.forgegradle.contains('2.3')) {
	// Mad hacks to make source replacements work for Kotlin
	for (set in sourceSets) {
	    def taskName = "source${set.name.capitalize()}Kotlin"
	    def dir = new File(project.getBuildDir(), "sources/${set.name}/kotlin")
	    if (project.forgegradle.contains('1.2')) {
		    task(taskName, type: net.minecraftforge.gradle.tasks.user.SourceCopyTask) {
		        source = set.getKotlin()
		        output = Class.forName('net.minecraftforge.gradle.delayed.DelayedFile').getConstructor(java.io.File.class).newInstance(dir)
		    }
	    } else {
		    task(taskName, type: net.minecraftforge.gradle.user.TaskSourceCopy) {
		        source = set.getKotlin()
		        output = dir
		    }
	    }
	    def compileTask = tasks[set.getCompileTaskName("kotlin")]
	    compileTask.source = dir
	    compileTask.dependsOn taskName
	    def dirPath = dir.toPath()
	    compileKotlin.include {
	        return it.file.toPath().startsWith(dirPath)
	    }
	}
}

task setupSourceSets {
    doLast {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.kotlin.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }
    [tasks.eclipseClasspath, tasks.ideaModule]*.dependsOn 'setupSourceSets'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand([
                'modid'          : project.modid,
                'modname'        : project.modname,
                'version'        : mod_version,
                'mcversion'      : project.version_minecraft,
                'forgeversion'   : project.version_forge,
                'minforgeversion': project.isProperty('version_minforge') ? project.version_minforge : project.version_forge,
        ])
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        // location of the maven that hosts JEI files
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "modmaven.k-4u.nl"
    }
    maven {
        url = "http://maven.shadowfacts.net/"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    shade fileTree(dir: 'libs/shade', include: '*.jar')
    compile fileTree(dir: '../libs', include: '*.jar')
    shade fileTree(dir: '../libs/shade', include: '*.jar')

    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile 'yukarilib:YukariLib-1.10.2:release:dev'
    compile "mezz.jei:jei_${version_minecraft}:${jei_version}:api"
    runtime "mezz.jei:jei_${version_minecraft}:${jei_version}"
    compile "net.shadowfacts:Forgelin:1.5.1"
}

sourceSets {
	[[common: common_api, src: api], [common: common_main, src: main], [common: common_test, src: test]].each { s ->
		s.common.java {
			srcDirs = ["../src/${s.src.name}/java"]
		}
		s.common.resources {
			srcDirs = ["../src/${s.src.name}/resources"]
		}
		s.common.compileClasspath += s.src.compileClasspath
		s.common.runtimeClasspath += s.src.runtimeClasspath
		s.src.compileClasspath += s.common.output
		s.src.runtimeClasspath += s.common.output
	}
}

ext.commonManifest = {
    if (project.isProperty('extra_fmlcore'))
        attributes 'FMLCorePlugin': project.extra_fmlcore
    if (project.isProperty('extra_fmlmod'))
        attributes 'FMLCorePluginContainsFMLMod': project.extra_fmlcore
    if (project.isProperty('extra_fmlat'))
        attributes 'FMLAT': project.extra_fmlat
}

// println(shadowJar.getSource().getFiles())
shadowJar.configurations = [project.configurations.shade]

shadowJar {
    from sourceSets.main.output
    from sourceSets.api.output
    from sourceSets.common_main.output
    from sourceSets.common_api.output
    classifier 'universal'
    manifest commonManifest
}

jar {
    from sourceSets.main.output
    from sourceSets.api.output
    classifier 'diff'
    manifest commonManifest
}

// println !reobf.hasProperty('dependsOn')
if (!reobf.hasProperty('dependsOn')) {
    reobf {
        shadowJar { mappingType = 'SEARGE' }
    }
} else {
    task reobfShadowJar(dependsOn: 'genSrgs', type: net.minecraftforge.gradle.tasks.user.reobf.ReobfTask) {
        exceptorCfg = fg_plugin.delayedFile net.minecraftforge.gradle.user.UserConstants.EXC_SRG
        srg = fg_plugin.delayedFile net.minecraftforge.gradle.user.UserConstants.REOBF_SRG
        fieldCsv = fg_plugin.delayedFile net.minecraftforge.gradle.user.UserConstants.FIELD_CSV
        fieldCsv = fg_plugin.delayedFile net.minecraftforge.gradle.user.UserConstants.METHOD_CSV
        mcVersion = fg_plugin.delayedString '{MC_VERSION}'
        mustRunAfter 'test'
        mustRunAfter 'shadowJar'
        reobf.dependsOn 'reobfShadowJar'
        reobf(tasks.shadowJar) { arg ->
            def javaConv = project.convention.plugins.get 'java'
            arg.classpath = javaConv.getSourceSets().getByName('main').compileClasspath
        }
        extraSrg = fg_plugin.extension.srgExtra
        afterEvaluate {
            if (fg_plugin.extension.decomp) {
                deobfFile = tasks.deobfuscateJar.delayedOutput
                recompFile = fg_plugin.delayedDirtyFile fg_plugin.srcDepName, null, 'jar'
            }
        }
    }
    reobf.dependsOn 'reobfShadowJar'
}

if (tasks.findByPath('sourceJar')==null) {
    task sourceJar(dependsOn: 'classes', type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
        manifest commonManifest
    }
}

sourceJar {
    from sourceSets.api.allSource
}

// An Error occured while switching above 1.8 -> under 1.7
task cleanMakeStart(type: Delete) {
    // makeStart.dependsOn 'cleanMakeStart'
    delete file(new File(tasks.makeStart.getTemporaryDir(), 'extracted'))
}

task devJar(dependsOn: 'classes', type: Jar) {
    from sourceSets.main.output
    from sourceSets.api.output
    classifier = 'dev'
    manifest commonManifest
}

task apiJar(dependsOn: 'classes', type: Jar) {
    from sourceSets.api.output
    classifier = 'api'
    manifest commonManifest
}

[jar, shadowJar, devJar, sourceJar, apiJar]*.destinationDir = mod_artifacts_dir

artifacts {
    archives jar
    archives shadowJar
    archives devJar
    archives sourceJar
    archives apiJar
}

task signJars(dependsOn: 'build') {
    gradle.taskGraph.whenReady {taskGraph ->
        if (taskGraph.hasTask(tasks.signJars))
            assert sec_keystore_location!=null, 'missing sec_keystore_location'
    }

    def keystore_location = sec_keystore_location ?: ''
    def keystore_alias = sec_keystore_alias ?: ''
    def keystore_password = sec_keystore_password ?: ''

    inputs.dir shadowJar.destinationDir
    inputs.file keystore_location
    inputs.property 'keystore_alias', keystore_alias
    inputs.property 'keystore_password', keystore_password
    outputs.dir shadowJar.destinationDir

    doLast {
        [jar, shadowJar, devJar, sourceJar, apiJar].each { eachtask ->
            eachtask.outputs.files.each { file ->
                if (!file.path.endsWith('.jar'))
                    return

                logger.lifecycle "signing ${file}"
                ant.signjar(
                        destDir: file.parentFile,
                        jar: file,
                        keystore: keystore_location,
                        alias: keystore_alias,
                        storepass: keystore_password
                )
            }
        }
    }
}

task deploy(dependsOn: 'build', type: Copy) {
    mustRunAfter 'signJars'

    if (mod_deploy_target.exists())
        mod_deploy_target.eachLine { target ->
            def dest = target.endsWith('.jar') ? target.parentFile : target

            from(project.tasks.shadowJar.outputs.files.singleFile)
            into(dest)

            rename { String oldname ->
                target.endsWith('.jar') ? target.name : oldname
            }

            eachFile { file ->
                def path = file.relativePath.getFile(dest)
                logger.lifecycle "copying to ${path}"
            }
        }
}

gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(tasks.curseforge)) {
        assert sec_curseforge_key!=null, 'missing sec_curseforge_key'
        assert project.isProperty('extra_curseforge_id'), 'missing extra_curseforge_id'
    }
}
if (sec_curseforge_key!=null&&project.isProperty('extra_curseforge_id')) {
    curseforge {
        tasks.curseforge.enabled = !mod_autorelease

        tasks.curseforge.dependsOn 'reobfShadowJar'
        tasks.curseforge.mustRunAfter 'signJars'
        apiKey = sec_curseforge_key
        project {
            id = project.extra_curseforge_id

            changelogType = 'markdown'
            changelog = mod_changelog

            releaseType = mod_releasetype

            mainArtifact(shadowJar) {
                displayName = "${shadowJar.baseName}-${shadowJar.version}"
            }
            [jar, devJar, sourceJar, apiJar].each { jar ->
                addArtifact(jar) {
                    displayName = "${jar.baseName}-${jar.version}-${jar.classifier}"
                }
            }

            relations {
            }
        }
    }
} else
    tasks.curseforge.enabled = false